{"version":3,"sources":["pages/host/CreateNewGame.jsx","SocketIoConnection.js","pages/host/HostsGame.jsx","pages/player/PlayerGame.jsx","pages/player/JoinGame.jsx","pages/host/Lobby.jsx","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","className","onClick","fetch","method","then","roomCode","text","length","Error","history","push","catch","alert","hostSocket","playerSocket","getHostSocket","getPlayerSocket","HostsGame","Component","state","phase","componentDidMount","socket","on","this","setState","onePromptAndAnswers","prompt","votingOptions","answers","votingResults","playersAndPoints","onStartNewGameClick","emit","onStartNewRoundClick","render","map","playerAndPoints","answersCount","dangerouslySetInnerHTML","__html","voteOption","cardClasses","count","voteResult","quiplash","answer","submitter","votes","join","PlayerGame","constructor","super","handleSubmitAnswerClick","bind","handleSubmitVoteClick","onAnswerChange","promptsToAnswer","currentPromptNumber","e","preventDefault","answerVotedFor","event","target","value","onSubmit","type","placeholder","onChange","JoinGame","React","handleJoinClick","onNameChange","onRoomCodeChange","errorMessage","playerName","getSavedName","savedName","localStorage","getItem","setItem","socketIOClient","defaultValue","Lobby","lobbyPlayers","getRoomCode","getConnectedPlayersComponent","lobbyPlayer","key","id","name","location","pathname","split","onStartGameClick","App","style","position","top","left","opacity","to","exact","path","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.31aebbaf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nfunction CreateNewGame(props) {\r\n  function handleClick() {\r\n    fetch(\"/create-new-game\", { method: \"POST\" })\r\n      .then((roomCode) => roomCode.text())\r\n      .then((roomCode) => {\r\n        if (roomCode && roomCode.length === 4) {\r\n          props.history.push(`/lobby/${roomCode}`);\r\n        } else {\r\n          throw new Error(\"Could not create game.  Server not responding.\");\r\n        }\r\n      })\r\n      .catch(() => alert(\"Could not create game.  Server not responding.\"));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Quiplash-JS</h1>\r\n      <button className=\"submit-form-button\" onClick={handleClick}>\r\n        Start new Game\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(CreateNewGame);\r\n","import socketIOClient from \"socket.io-client\";\r\n\r\nlet hostSocket;\r\nlet playerSocket;\r\n\r\nexport function initializeHostSocketIoConnection() {\r\n  hostSocket = socketIOClient();\r\n  return hostSocket;\r\n}\r\n\r\nexport function initializePlayerSocketIoConnection() {\r\n  playerSocket = socketIOClient();\r\n  return playerSocket;\r\n}\r\n\r\nexport function getHostSocket() {\r\n  return hostSocket;\r\n}\r\n\r\nexport function getPlayerSocket() {\r\n  return playerSocket;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport \"./HostsGame.css\";\r\nimport { getHostSocket } from \"../../SocketIoConnection\";\r\n\r\nclass HostsGame extends Component {\r\n  state = { phase: \"SHOW_INSTRUCTIONS\" };\r\n  // Test state\r\n  // state = {\r\n  //   phase: \"VOTING_RESULTS_PHASE\",\r\n  //   prompt: \"How are you doing today?\",\r\n  //   votingOptions: [\"I'm doing well\", \"Not so great\"],\r\n  //   votingResults: [\r\n  //     { answer: \"I'm doing well\", submitter: \"Allan\", votes: [], state: \"LOSER\" },\r\n  //     {\r\n  //       answer: \"Not so great\",\r\n  //       submitter: \"Simon\",\r\n  //       votes: [\"Allan\", \"Bobby\", \"Simon\"],\r\n  //       state: \"WINNER\",\r\n  //       quiplash: true,\r\n  //     },\r\n  //   ],\r\n  // };\r\n  // state = {\r\n  //   phase: \"SHOW_PLAYER_POINTS\",\r\n  //   playersAndPoints: [\r\n  //     [\"simon\", 15],\r\n  //     [\"alan\", 10],\r\n  //     [\"simon 1234\", 3],\r\n  //     [\"Poop\", 0],\r\n  //   ],\r\n  // };\r\n\r\n  componentDidMount() {\r\n    const socket = getHostSocket();\r\n    if (!socket) {\r\n      // For easier local debugging with live-reload changes\r\n      this.props.history.push(\"/create\");\r\n      return;\r\n    }\r\n    socket.on(\"START_GAME\", () => this.setState({ phase: \"SHOW_INSTRUCTIONS\" }));\r\n    socket.on(\"START_VOTING_PHASE\", (onePromptAndAnswers) =>\r\n      this.setState({\r\n        phase: \"VOTING_PHASE\",\r\n        prompt: onePromptAndAnswers.prompt,\r\n        votingOptions: onePromptAndAnswers.answers,\r\n      }),\r\n    );\r\n    socket.on(\"VOTING_RESULTS\", (votingResults) => this.setState({ phase: \"VOTING_RESULTS_PHASE\", votingResults }));\r\n    socket.on(\"SHOW_PLAYER_POINTS\", (playersAndPoints) =>\r\n      this.setState({ phase: \"SHOW_PLAYER_POINTS\", playersAndPoints }),\r\n    );\r\n  }\r\n\r\n  onStartNewGameClick() {\r\n    getHostSocket().emit(\"HOST_STARTING_GAME\");\r\n  }\r\n\r\n  onStartNewRoundClick() {\r\n    getHostSocket().emit(\"HOST_START_ROUND\");\r\n  }\r\n\r\n  render() {\r\n    switch (this.state.phase) {\r\n      case \"SHOW_INSTRUCTIONS\":\r\n        return <h1>Look at your devices. Fill out a silly answer to your prompt.</h1>;\r\n      case \"SHOW_PLAYER_POINTS\":\r\n        return (\r\n          <div>\r\n            <h1>Final Scores</h1>\r\n            <div className=\"player-scores\">\r\n              {this.state.playersAndPoints.map((playerAndPoints) => (\r\n                <h2>{`${playerAndPoints[0]} : ${playerAndPoints[1]}`}</h2>\r\n              ))}\r\n            </div>\r\n            <button className=\"submit-form-button start-new-round-button\" onClick={this.onStartNewGameClick}>\r\n              Start New Game\r\n            </button>\r\n          </div>\r\n        );\r\n      case \"VOTING_PHASE\":\r\n        let answersCount = 0;\r\n        return (\r\n          <div>\r\n            <h1 className=\"prompt\" dangerouslySetInnerHTML={{ __html: this.state.prompt }}></h1>\r\n            <div className=\"answers\">\r\n              {this.state.votingOptions.map((voteOption) => {\r\n                let cardClasses = \"card\";\r\n                if (answersCount % 2 === 1) {\r\n                  cardClasses += \" reversed\";\r\n                }\r\n                answersCount++;\r\n                return (\r\n                  <div className=\"wrapper\">\r\n                    <div className={cardClasses}>\r\n                      <h1>{voteOption}</h1>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        );\r\n      case \"VOTING_RESULTS_PHASE\":\r\n        let count = 0;\r\n        return (\r\n          <div>\r\n            <h1 className=\"prompt\" dangerouslySetInnerHTML={{ __html: this.state.prompt }}></h1>\r\n            <div className=\"answers\">\r\n              {this.state.votingResults.map((voteResult) => {\r\n                let cardClasses = \"card\";\r\n                if (count % 2 === 1) {\r\n                  cardClasses += \" reversed\";\r\n                }\r\n                count++;\r\n                if (voteResult.state === \"WINNER\") {\r\n                  cardClasses += \" winning-answer\";\r\n                } else if (voteResult.state === \"LOSER\") {\r\n                  cardClasses += \" losing-answer\";\r\n                }\r\n                if (voteResult.quiplash) {\r\n                  cardClasses += \" winning-quiplash\";\r\n                }\r\n                return (\r\n                  <div className=\"wrapper\">\r\n                    <div className={cardClasses}>\r\n                      {voteResult.quiplash && <div className=\"quiplash-text\">QUIPLASH</div>}\r\n                      <h1>{voteResult.answer}</h1>\r\n                    </div>\r\n                    <div className=\"submitter\">{`Submitted by ${voteResult.submitter}`}</div>\r\n                    <div className=\"voters\">\r\n                      {voteResult.votes.length === 0 ? \"No Votes\" : voteResult.votes.join(\", \")}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <button className=\"submit-form-button start-new-round-button\" onClick={this.onStartNewRoundClick}>\r\n              Start Next Round\r\n            </button>\r\n          </div>\r\n        );\r\n      default:\r\n        throw new Error(\"Invalid Host State \", this.state.phase);\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(HostsGame);\r\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { getPlayerSocket } from \"../../SocketIoConnection\";\r\n\r\nclass PlayerGame extends Component {\r\n  state = { phase: \"WAITING_TO_START\", answer: \"\" };\r\n  // Test state\r\n  // state = {\r\n  //   phase: \"STARTED\",\r\n  //   promptsToAnswer: [\r\n  //     \"The most <i>horrific</i> way to start your day\",\r\n  //     \"You are having a stroll in the park, only to see <BLANK>\",\r\n  //   ],\r\n  //   currentPromptNumber: 0,\r\n  // };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSubmitAnswerClick = this.handleSubmitAnswerClick.bind(this);\r\n    this.handleSubmitVoteClick = this.handleSubmitVoteClick.bind(this);\r\n    this.handleSubmitVoteClick = this.handleSubmitVoteClick.bind(this);\r\n    this.onAnswerChange = this.onAnswerChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const socket = getPlayerSocket();\r\n    if (!socket) {\r\n      // For easier local debugging with live-reload changes\r\n      this.props.history.push(\"/\");\r\n      return;\r\n    }\r\n    socket.on(\"START_GAME\", (promptsToAnswer) =>\r\n      this.setState({ phase: \"STARTED\", promptsToAnswer, currentPromptNumber: 0 }),\r\n    );\r\n    socket.on(\"START_VOTING_PHASE\", (onePromptAndAnswers) =>\r\n      this.setState({\r\n        phase: \"VOTING\",\r\n        prompt: onePromptAndAnswers.prompt,\r\n        votingOptions: onePromptAndAnswers.answers,\r\n      }),\r\n    );\r\n  }\r\n\r\n  handleSubmitAnswerClick(e) {\r\n    e.preventDefault(); // To prevent page reload on form submit\r\n    if (this.state.answer) {\r\n      getPlayerSocket().emit(\"SUBMIT_ANSWER\", {\r\n        prompt: this.state.promptsToAnswer[this.state.currentPromptNumber],\r\n        answer: this.state.answer,\r\n      });\r\n      if (this.state.currentPromptNumber >= 1) {\r\n        this.setState({ answer: \"\", phase: \"SUBMITTED_ANSWER\" });\r\n      } else {\r\n        this.setState({ answer: \"\", currentPromptNumber: 1 });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleSubmitVoteClick(answerVotedFor) {\r\n    getPlayerSocket().emit(\"SUBMIT_VOTE\", { prompt: this.state.prompt, answerVotedFor });\r\n    this.setState({ phase: \"WAITING_FOR_NEXT_ROUND\" });\r\n  }\r\n\r\n  onAnswerChange(event) {\r\n    this.setState({ answer: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    switch (this.state.phase) {\r\n      case \"STARTED\":\r\n        return (\r\n          <form onSubmit={this.handleSubmitAnswerClick}>\r\n            <div>\r\n              <h1 dangerouslySetInnerHTML={{ __html: this.state.promptsToAnswer[this.state.currentPromptNumber] }}></h1>\r\n              <input\r\n                className=\"form-input player\"\r\n                type=\"text\"\r\n                placeholder=\"Answer Here\"\r\n                value={this.state.answer}\r\n                onChange={this.onAnswerChange}\r\n              />\r\n              <br />\r\n            </div>\r\n            <button className=\"player-button\" type=\"submit\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n        );\r\n      case \"SUBMITTED_ANSWER\":\r\n        return <h1>Waiting for other players to submit their responses...</h1>;\r\n      case \"VOTING\":\r\n        return (\r\n          <div>\r\n            <h1 dangerouslySetInnerHTML={{ __html: this.state.prompt }}></h1>\r\n            <h2>Which one do you like more?</h2>\r\n            {this.state.votingOptions.map((voteOption) => (\r\n              <button className=\"player-button\" onClick={() => this.handleSubmitVoteClick(voteOption)}>\r\n                {voteOption}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        );\r\n      case \"WAITING_TO_START\":\r\n        return <h1>Waiting for game to start...</h1>;\r\n      case \"WAITING_FOR_NEXT_ROUND\":\r\n        return <h1>See the results on screen</h1>;\r\n      default:\r\n        throw new Error(\"Invalid Player State \", this.state.phase);\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(PlayerGame);\r\n","import React from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { initializePlayerSocketIoConnection } from \"../../SocketIoConnection\";\r\n\r\nclass JoinGame extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleJoinClick = this.handleJoinClick.bind(this);\r\n    this.onNameChange = this.onNameChange.bind(this);\r\n    this.onRoomCodeChange = this.onRoomCodeChange.bind(this);\r\n    this.state = { errorMessage: \"\", playerName: this.getSavedName() };\r\n  }\r\n\r\n  getSavedName() {\r\n    const savedName = localStorage.getItem(\"QUIPLASH_NAME\");\r\n    return savedName ? savedName : \"\";\r\n  }\r\n\r\n  handleJoinClick(e) {\r\n    e.preventDefault(); // To prevent page reload on form submit\r\n    localStorage.setItem(\"QUIPLASH_NAME\", this.state.playerName);\r\n    const socket = initializePlayerSocketIoConnection();\r\n    socket.emit(\"PLAYER_JOIN\", { roomCode: this.state.roomCode, playerName: this.state.playerName });\r\n    socket.on(\"SUCCESSFULLY_JOINED_ROOM\", () => this.props.history.push(`/game/${this.state.roomCode}`));\r\n  }\r\n\r\n  onNameChange(event) {\r\n    this.setState({ playerName: event.target.value });\r\n  }\r\n\r\n  onRoomCodeChange(event) {\r\n    this.setState({ roomCode: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleJoinClick}>\r\n        <h1>Join a Game</h1>\r\n        <div>\r\n          <label className=\"form-label\">Room Code</label>\r\n          <input className=\"form-input\" type=\"text\" placeholder=\"Four digit code\" onChange={this.onRoomCodeChange} />\r\n          <br />\r\n          <label className=\"form-label\">Your Name </label>\r\n          <input\r\n            className=\"form-input\"\r\n            type=\"text\"\r\n            placeholder=\"Name\"\r\n            defaultValue={this.getSavedName()}\r\n            onChange={this.onNameChange}\r\n          />\r\n          <br />\r\n        </div>\r\n        <button className=\"player-button\" type=\"submit\">\r\n          Play\r\n        </button>\r\n        <div>{this.state.errorMessage}</div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(JoinGame);\r\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { getHostSocket, initializeHostSocketIoConnection } from \"../../SocketIoConnection\";\r\nimport \"./Lobby.css\";\r\n\r\nclass Lobby extends Component {\r\n  state = { lobbyPlayers: [] };\r\n\r\n  componentDidMount() {\r\n    const socket = initializeHostSocketIoConnection();\r\n    if (!socket) {\r\n      // For easier local debugging with live-reload changes\r\n      this.props.history.push(\"/create\");\r\n      return;\r\n    }\r\n    socket.emit(\"HOST_JOINED_ROOM\", this.getRoomCode());\r\n    socket.on(\"LOBBY_PLAYERS_UPDATED\", (lobbyPlayers) => {\r\n      this.setState({ lobbyPlayers });\r\n    });\r\n  }\r\n\r\n  getConnectedPlayersComponent() {\r\n    if (this.state.lobbyPlayers.length === 0) {\r\n      return <div>No connected players yet.</div>;\r\n    }\r\n    return this.state.lobbyPlayers.map((lobbyPlayer) => <div key={lobbyPlayer.id}>{lobbyPlayer.name}</div>);\r\n  }\r\n\r\n  getRoomCode() {\r\n    return this.props.location.pathname.split(\"/lobby/\")[1];\r\n  }\r\n\r\n  onStartGameClick() {\r\n    if (this.state.lobbyPlayers.length < 3) {\r\n      alert(\"You need at least three players to play this game.\");\r\n      return;\r\n    } else if (this.state.lobbyPlayers.length > 8) {\r\n      alert(\"You have too many players.  Max number of players is 8.\");\r\n      return;\r\n    }\r\n    const socket = getHostSocket();\r\n    socket.emit(\"HOST_STARTING_GAME\");\r\n    this.props.history.push(\"/hostsgame\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Quiplash-JS</h1>\r\n        <div className=\"lobby-room-instructions\">\r\n          Go to <span className=\"room-url\">quiplashjs.herokuapp.com</span> on your mobile device\r\n        </div>\r\n        <div className=\"lobby-room-code-text\">Room Code</div>\r\n        <div className=\"room-code\">{this.getRoomCode()}</div>\r\n        <div className=\"connected-players\">{this.getConnectedPlayersComponent()}</div>\r\n        <button className=\"submit-form-button\" onClick={this.onStartGameClick.bind(this)}>\r\n          Start Game\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Lobby);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport CreateNewGame from \"./pages/host/CreateNewGame\";\nimport HostsGame from \"./pages/host/HostsGame\";\nimport PlayerGame from \"./pages/player/PlayerGame\";\nimport JoinGame from \"./pages/player/JoinGame\";\nimport Lobby from \"./pages/host/Lobby\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"centered-text colorful-background\">\n          <div style={{ position: \"absolute\", top: 0, left: 0, opacity: 0 }}>\n            <Link to=\"/create\">HOST</Link>\n            <br />\n            <Link to=\"/\">JOIN</Link>\n          </div>\n          <Switch>\n            <Route exact path=\"/\">\n              <JoinGame />\n            </Route>\n            <Route path=\"/create\">\n              <CreateNewGame />\n            </Route>\n            <Route path=\"/game\">\n              <PlayerGame />\n            </Route>\n            <Route path=\"/hostsgame\">\n              <HostsGame />\n            </Route>\n            <Route path=\"/lobby\">\n              <Lobby />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}